// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/accounts/internal/app/app1/ent/accounts"
	"github.com/pepeunlimited/accounts/internal/app/app1/ent/predicate"
	"github.com/pepeunlimited/accounts/internal/app/app1/ent/txs"
)

// AccountsUpdate is the builder for updating Accounts entities.
type AccountsUpdate struct {
	config
	balance         *int64
	addbalance      *int64
	version         *uint8
	addversion      *uint8
	_type           *string
	is_withdrawable *bool
	user_id         *int64
	adduser_id      *int64
	txs             map[int]struct{}
	removedTxs      map[int]struct{}
	predicates      []predicate.Accounts
}

// Where adds a new predicate for the builder.
func (au *AccountsUpdate) Where(ps ...predicate.Accounts) *AccountsUpdate {
	au.predicates = append(au.predicates, ps...)
	return au
}

// SetBalance sets the balance field.
func (au *AccountsUpdate) SetBalance(i int64) *AccountsUpdate {
	au.balance = &i
	au.addbalance = nil
	return au
}

// AddBalance adds i to balance.
func (au *AccountsUpdate) AddBalance(i int64) *AccountsUpdate {
	if au.addbalance == nil {
		au.addbalance = &i
	} else {
		*au.addbalance += i
	}
	return au
}

// SetVersion sets the version field.
func (au *AccountsUpdate) SetVersion(u uint8) *AccountsUpdate {
	au.version = &u
	au.addversion = nil
	return au
}

// AddVersion adds u to version.
func (au *AccountsUpdate) AddVersion(u uint8) *AccountsUpdate {
	if au.addversion == nil {
		au.addversion = &u
	} else {
		*au.addversion += u
	}
	return au
}

// SetType sets the type field.
func (au *AccountsUpdate) SetType(s string) *AccountsUpdate {
	au._type = &s
	return au
}

// SetIsWithdrawable sets the is_withdrawable field.
func (au *AccountsUpdate) SetIsWithdrawable(b bool) *AccountsUpdate {
	au.is_withdrawable = &b
	return au
}

// SetUserID sets the user_id field.
func (au *AccountsUpdate) SetUserID(i int64) *AccountsUpdate {
	au.user_id = &i
	au.adduser_id = nil
	return au
}

// AddUserID adds i to user_id.
func (au *AccountsUpdate) AddUserID(i int64) *AccountsUpdate {
	if au.adduser_id == nil {
		au.adduser_id = &i
	} else {
		*au.adduser_id += i
	}
	return au
}

// AddTxIDs adds the txs edge to Txs by ids.
func (au *AccountsUpdate) AddTxIDs(ids ...int) *AccountsUpdate {
	if au.txs == nil {
		au.txs = make(map[int]struct{})
	}
	for i := range ids {
		au.txs[ids[i]] = struct{}{}
	}
	return au
}

// AddTxs adds the txs edges to Txs.
func (au *AccountsUpdate) AddTxs(t ...*Txs) *AccountsUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddTxIDs(ids...)
}

// RemoveTxIDs removes the txs edge to Txs by ids.
func (au *AccountsUpdate) RemoveTxIDs(ids ...int) *AccountsUpdate {
	if au.removedTxs == nil {
		au.removedTxs = make(map[int]struct{})
	}
	for i := range ids {
		au.removedTxs[ids[i]] = struct{}{}
	}
	return au
}

// RemoveTxs removes txs edges to Txs.
func (au *AccountsUpdate) RemoveTxs(t ...*Txs) *AccountsUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveTxIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (au *AccountsUpdate) Save(ctx context.Context) (int, error) {
	if au._type != nil {
		if err := accounts.TypeValidator(*au._type); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"type\": %v", err)
		}
	}
	return au.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AccountsUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AccountsUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AccountsUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AccountsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accounts.Table,
			Columns: accounts.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accounts.FieldID,
			},
		},
	}
	if ps := au.predicates; len(ps) > 0 {
		spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := au.balance; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: accounts.FieldBalance,
		})
	}
	if value := au.addbalance; value != nil {
		spec.Fields.Add = append(spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: accounts.FieldBalance,
		})
	}
	if value := au.version; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  *value,
			Column: accounts.FieldVersion,
		})
	}
	if value := au.addversion; value != nil {
		spec.Fields.Add = append(spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  *value,
			Column: accounts.FieldVersion,
		})
	}
	if value := au._type; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: accounts.FieldType,
		})
	}
	if value := au.is_withdrawable; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: accounts.FieldIsWithdrawable,
		})
	}
	if value := au.user_id; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: accounts.FieldUserID,
		})
	}
	if value := au.adduser_id; value != nil {
		spec.Fields.Add = append(spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: accounts.FieldUserID,
		})
	}
	if nodes := au.removedTxs; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.TxsTable,
			Columns: []string{accounts.TxsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: txs.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := au.txs; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.TxsTable,
			Columns: []string{accounts.TxsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: txs.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AccountsUpdateOne is the builder for updating a single Accounts entity.
type AccountsUpdateOne struct {
	config
	id              int
	balance         *int64
	addbalance      *int64
	version         *uint8
	addversion      *uint8
	_type           *string
	is_withdrawable *bool
	user_id         *int64
	adduser_id      *int64
	txs             map[int]struct{}
	removedTxs      map[int]struct{}
}

// SetBalance sets the balance field.
func (auo *AccountsUpdateOne) SetBalance(i int64) *AccountsUpdateOne {
	auo.balance = &i
	auo.addbalance = nil
	return auo
}

// AddBalance adds i to balance.
func (auo *AccountsUpdateOne) AddBalance(i int64) *AccountsUpdateOne {
	if auo.addbalance == nil {
		auo.addbalance = &i
	} else {
		*auo.addbalance += i
	}
	return auo
}

// SetVersion sets the version field.
func (auo *AccountsUpdateOne) SetVersion(u uint8) *AccountsUpdateOne {
	auo.version = &u
	auo.addversion = nil
	return auo
}

// AddVersion adds u to version.
func (auo *AccountsUpdateOne) AddVersion(u uint8) *AccountsUpdateOne {
	if auo.addversion == nil {
		auo.addversion = &u
	} else {
		*auo.addversion += u
	}
	return auo
}

// SetType sets the type field.
func (auo *AccountsUpdateOne) SetType(s string) *AccountsUpdateOne {
	auo._type = &s
	return auo
}

// SetIsWithdrawable sets the is_withdrawable field.
func (auo *AccountsUpdateOne) SetIsWithdrawable(b bool) *AccountsUpdateOne {
	auo.is_withdrawable = &b
	return auo
}

// SetUserID sets the user_id field.
func (auo *AccountsUpdateOne) SetUserID(i int64) *AccountsUpdateOne {
	auo.user_id = &i
	auo.adduser_id = nil
	return auo
}

// AddUserID adds i to user_id.
func (auo *AccountsUpdateOne) AddUserID(i int64) *AccountsUpdateOne {
	if auo.adduser_id == nil {
		auo.adduser_id = &i
	} else {
		*auo.adduser_id += i
	}
	return auo
}

// AddTxIDs adds the txs edge to Txs by ids.
func (auo *AccountsUpdateOne) AddTxIDs(ids ...int) *AccountsUpdateOne {
	if auo.txs == nil {
		auo.txs = make(map[int]struct{})
	}
	for i := range ids {
		auo.txs[ids[i]] = struct{}{}
	}
	return auo
}

// AddTxs adds the txs edges to Txs.
func (auo *AccountsUpdateOne) AddTxs(t ...*Txs) *AccountsUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddTxIDs(ids...)
}

// RemoveTxIDs removes the txs edge to Txs by ids.
func (auo *AccountsUpdateOne) RemoveTxIDs(ids ...int) *AccountsUpdateOne {
	if auo.removedTxs == nil {
		auo.removedTxs = make(map[int]struct{})
	}
	for i := range ids {
		auo.removedTxs[ids[i]] = struct{}{}
	}
	return auo
}

// RemoveTxs removes txs edges to Txs.
func (auo *AccountsUpdateOne) RemoveTxs(t ...*Txs) *AccountsUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveTxIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (auo *AccountsUpdateOne) Save(ctx context.Context) (*Accounts, error) {
	if auo._type != nil {
		if err := accounts.TypeValidator(*auo._type); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"type\": %v", err)
		}
	}
	return auo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AccountsUpdateOne) SaveX(ctx context.Context) *Accounts {
	a, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return a
}

// Exec executes the query on the entity.
func (auo *AccountsUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AccountsUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AccountsUpdateOne) sqlSave(ctx context.Context) (a *Accounts, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accounts.Table,
			Columns: accounts.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  auo.id,
				Type:   field.TypeInt,
				Column: accounts.FieldID,
			},
		},
	}
	if value := auo.balance; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: accounts.FieldBalance,
		})
	}
	if value := auo.addbalance; value != nil {
		spec.Fields.Add = append(spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: accounts.FieldBalance,
		})
	}
	if value := auo.version; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  *value,
			Column: accounts.FieldVersion,
		})
	}
	if value := auo.addversion; value != nil {
		spec.Fields.Add = append(spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  *value,
			Column: accounts.FieldVersion,
		})
	}
	if value := auo._type; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: accounts.FieldType,
		})
	}
	if value := auo.is_withdrawable; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: accounts.FieldIsWithdrawable,
		})
	}
	if value := auo.user_id; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: accounts.FieldUserID,
		})
	}
	if value := auo.adduser_id; value != nil {
		spec.Fields.Add = append(spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: accounts.FieldUserID,
		})
	}
	if nodes := auo.removedTxs; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.TxsTable,
			Columns: []string{accounts.TxsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: txs.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := auo.txs; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accounts.TxsTable,
			Columns: []string{accounts.TxsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: txs.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	a = &Accounts{config: auo.config}
	spec.Assign = a.assignValues
	spec.ScanValues = a.scanValues()
	if err = sqlgraph.UpdateNode(ctx, auo.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return a, nil
}
