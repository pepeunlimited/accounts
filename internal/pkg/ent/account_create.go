// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/accounts/internal/pkg/ent/account"
	"github.com/pepeunlimited/accounts/internal/pkg/ent/txs"
)

// AccountCreate is the builder for creating a Account entity.
type AccountCreate struct {
	config
	balance     *int64
	version     *uint8
	is_verified *bool
	user_id     *int64
	txs         map[int]struct{}
}

// SetBalance sets the balance field.
func (ac *AccountCreate) SetBalance(i int64) *AccountCreate {
	ac.balance = &i
	return ac
}

// SetVersion sets the version field.
func (ac *AccountCreate) SetVersion(u uint8) *AccountCreate {
	ac.version = &u
	return ac
}

// SetIsVerified sets the is_verified field.
func (ac *AccountCreate) SetIsVerified(b bool) *AccountCreate {
	ac.is_verified = &b
	return ac
}

// SetUserID sets the user_id field.
func (ac *AccountCreate) SetUserID(i int64) *AccountCreate {
	ac.user_id = &i
	return ac
}

// AddTxIDs adds the txs edge to Txs by ids.
func (ac *AccountCreate) AddTxIDs(ids ...int) *AccountCreate {
	if ac.txs == nil {
		ac.txs = make(map[int]struct{})
	}
	for i := range ids {
		ac.txs[ids[i]] = struct{}{}
	}
	return ac
}

// AddTxs adds the txs edges to Txs.
func (ac *AccountCreate) AddTxs(t ...*Txs) *AccountCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ac.AddTxIDs(ids...)
}

// Save creates the Account in the database.
func (ac *AccountCreate) Save(ctx context.Context) (*Account, error) {
	if ac.balance == nil {
		return nil, errors.New("ent: missing required field \"balance\"")
	}
	if ac.version == nil {
		return nil, errors.New("ent: missing required field \"version\"")
	}
	if ac.is_verified == nil {
		return nil, errors.New("ent: missing required field \"is_verified\"")
	}
	if ac.user_id == nil {
		return nil, errors.New("ent: missing required field \"user_id\"")
	}
	return ac.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AccountCreate) SaveX(ctx context.Context) *Account {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ac *AccountCreate) sqlSave(ctx context.Context) (*Account, error) {
	var (
		a     = &Account{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: account.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: account.FieldID,
			},
		}
	)
	if value := ac.balance; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: account.FieldBalance,
		})
		a.Balance = *value
	}
	if value := ac.version; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  *value,
			Column: account.FieldVersion,
		})
		a.Version = *value
	}
	if value := ac.is_verified; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: account.FieldIsVerified,
		})
		a.IsVerified = *value
	}
	if value := ac.user_id; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: account.FieldUserID,
		})
		a.UserID = *value
	}
	if nodes := ac.txs; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.TxsTable,
			Columns: []string{account.TxsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: txs.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	a.ID = int(id)
	return a, nil
}
