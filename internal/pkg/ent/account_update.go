// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/accounts/internal/pkg/ent/account"
	"github.com/pepeunlimited/accounts/internal/pkg/ent/predicate"
	"github.com/pepeunlimited/accounts/internal/pkg/ent/txs"
)

// AccountUpdate is the builder for updating Account entities.
type AccountUpdate struct {
	config
	balance     *int64
	addbalance  *int64
	version     *uint8
	addversion  *uint8
	is_verified *bool
	user_id     *int64
	adduser_id  *int64
	txs         map[int]struct{}
	removedTxs  map[int]struct{}
	predicates  []predicate.Account
}

// Where adds a new predicate for the builder.
func (au *AccountUpdate) Where(ps ...predicate.Account) *AccountUpdate {
	au.predicates = append(au.predicates, ps...)
	return au
}

// SetBalance sets the balance field.
func (au *AccountUpdate) SetBalance(i int64) *AccountUpdate {
	au.balance = &i
	au.addbalance = nil
	return au
}

// AddBalance adds i to balance.
func (au *AccountUpdate) AddBalance(i int64) *AccountUpdate {
	if au.addbalance == nil {
		au.addbalance = &i
	} else {
		*au.addbalance += i
	}
	return au
}

// SetVersion sets the version field.
func (au *AccountUpdate) SetVersion(u uint8) *AccountUpdate {
	au.version = &u
	au.addversion = nil
	return au
}

// AddVersion adds u to version.
func (au *AccountUpdate) AddVersion(u uint8) *AccountUpdate {
	if au.addversion == nil {
		au.addversion = &u
	} else {
		*au.addversion += u
	}
	return au
}

// SetIsVerified sets the is_verified field.
func (au *AccountUpdate) SetIsVerified(b bool) *AccountUpdate {
	au.is_verified = &b
	return au
}

// SetUserID sets the user_id field.
func (au *AccountUpdate) SetUserID(i int64) *AccountUpdate {
	au.user_id = &i
	au.adduser_id = nil
	return au
}

// AddUserID adds i to user_id.
func (au *AccountUpdate) AddUserID(i int64) *AccountUpdate {
	if au.adduser_id == nil {
		au.adduser_id = &i
	} else {
		*au.adduser_id += i
	}
	return au
}

// AddTxIDs adds the txs edge to Txs by ids.
func (au *AccountUpdate) AddTxIDs(ids ...int) *AccountUpdate {
	if au.txs == nil {
		au.txs = make(map[int]struct{})
	}
	for i := range ids {
		au.txs[ids[i]] = struct{}{}
	}
	return au
}

// AddTxs adds the txs edges to Txs.
func (au *AccountUpdate) AddTxs(t ...*Txs) *AccountUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddTxIDs(ids...)
}

// RemoveTxIDs removes the txs edge to Txs by ids.
func (au *AccountUpdate) RemoveTxIDs(ids ...int) *AccountUpdate {
	if au.removedTxs == nil {
		au.removedTxs = make(map[int]struct{})
	}
	for i := range ids {
		au.removedTxs[ids[i]] = struct{}{}
	}
	return au
}

// RemoveTxs removes txs edges to Txs.
func (au *AccountUpdate) RemoveTxs(t ...*Txs) *AccountUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveTxIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (au *AccountUpdate) Save(ctx context.Context) (int, error) {
	return au.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AccountUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AccountUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AccountUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   account.Table,
			Columns: account.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: account.FieldID,
			},
		},
	}
	if ps := au.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := au.balance; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: account.FieldBalance,
		})
	}
	if value := au.addbalance; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: account.FieldBalance,
		})
	}
	if value := au.version; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  *value,
			Column: account.FieldVersion,
		})
	}
	if value := au.addversion; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  *value,
			Column: account.FieldVersion,
		})
	}
	if value := au.is_verified; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: account.FieldIsVerified,
		})
	}
	if value := au.user_id; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: account.FieldUserID,
		})
	}
	if value := au.adduser_id; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: account.FieldUserID,
		})
	}
	if nodes := au.removedTxs; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.TxsTable,
			Columns: []string{account.TxsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: txs.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.txs; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.TxsTable,
			Columns: []string{account.TxsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: txs.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AccountUpdateOne is the builder for updating a single Account entity.
type AccountUpdateOne struct {
	config
	id          int
	balance     *int64
	addbalance  *int64
	version     *uint8
	addversion  *uint8
	is_verified *bool
	user_id     *int64
	adduser_id  *int64
	txs         map[int]struct{}
	removedTxs  map[int]struct{}
}

// SetBalance sets the balance field.
func (auo *AccountUpdateOne) SetBalance(i int64) *AccountUpdateOne {
	auo.balance = &i
	auo.addbalance = nil
	return auo
}

// AddBalance adds i to balance.
func (auo *AccountUpdateOne) AddBalance(i int64) *AccountUpdateOne {
	if auo.addbalance == nil {
		auo.addbalance = &i
	} else {
		*auo.addbalance += i
	}
	return auo
}

// SetVersion sets the version field.
func (auo *AccountUpdateOne) SetVersion(u uint8) *AccountUpdateOne {
	auo.version = &u
	auo.addversion = nil
	return auo
}

// AddVersion adds u to version.
func (auo *AccountUpdateOne) AddVersion(u uint8) *AccountUpdateOne {
	if auo.addversion == nil {
		auo.addversion = &u
	} else {
		*auo.addversion += u
	}
	return auo
}

// SetIsVerified sets the is_verified field.
func (auo *AccountUpdateOne) SetIsVerified(b bool) *AccountUpdateOne {
	auo.is_verified = &b
	return auo
}

// SetUserID sets the user_id field.
func (auo *AccountUpdateOne) SetUserID(i int64) *AccountUpdateOne {
	auo.user_id = &i
	auo.adduser_id = nil
	return auo
}

// AddUserID adds i to user_id.
func (auo *AccountUpdateOne) AddUserID(i int64) *AccountUpdateOne {
	if auo.adduser_id == nil {
		auo.adduser_id = &i
	} else {
		*auo.adduser_id += i
	}
	return auo
}

// AddTxIDs adds the txs edge to Txs by ids.
func (auo *AccountUpdateOne) AddTxIDs(ids ...int) *AccountUpdateOne {
	if auo.txs == nil {
		auo.txs = make(map[int]struct{})
	}
	for i := range ids {
		auo.txs[ids[i]] = struct{}{}
	}
	return auo
}

// AddTxs adds the txs edges to Txs.
func (auo *AccountUpdateOne) AddTxs(t ...*Txs) *AccountUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddTxIDs(ids...)
}

// RemoveTxIDs removes the txs edge to Txs by ids.
func (auo *AccountUpdateOne) RemoveTxIDs(ids ...int) *AccountUpdateOne {
	if auo.removedTxs == nil {
		auo.removedTxs = make(map[int]struct{})
	}
	for i := range ids {
		auo.removedTxs[ids[i]] = struct{}{}
	}
	return auo
}

// RemoveTxs removes txs edges to Txs.
func (auo *AccountUpdateOne) RemoveTxs(t ...*Txs) *AccountUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveTxIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (auo *AccountUpdateOne) Save(ctx context.Context) (*Account, error) {
	return auo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AccountUpdateOne) SaveX(ctx context.Context) *Account {
	a, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return a
}

// Exec executes the query on the entity.
func (auo *AccountUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AccountUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AccountUpdateOne) sqlSave(ctx context.Context) (a *Account, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   account.Table,
			Columns: account.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  auo.id,
				Type:   field.TypeInt,
				Column: account.FieldID,
			},
		},
	}
	if value := auo.balance; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: account.FieldBalance,
		})
	}
	if value := auo.addbalance; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: account.FieldBalance,
		})
	}
	if value := auo.version; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  *value,
			Column: account.FieldVersion,
		})
	}
	if value := auo.addversion; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  *value,
			Column: account.FieldVersion,
		})
	}
	if value := auo.is_verified; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: account.FieldIsVerified,
		})
	}
	if value := auo.user_id; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: account.FieldUserID,
		})
	}
	if value := auo.adduser_id; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: account.FieldUserID,
		})
	}
	if nodes := auo.removedTxs; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.TxsTable,
			Columns: []string{account.TxsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: txs.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.txs; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.TxsTable,
			Columns: []string{account.TxsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: txs.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	a = &Account{config: auo.config}
	_spec.Assign = a.assignValues
	_spec.ScanValues = a.scanValues()
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return a, nil
}
