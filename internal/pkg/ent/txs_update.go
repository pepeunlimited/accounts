// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/accounts/internal/pkg/ent/account"
	"github.com/pepeunlimited/accounts/internal/pkg/ent/predicate"
	"github.com/pepeunlimited/accounts/internal/pkg/ent/txs"
)

// TxsUpdate is the builder for updating Txs entities.
type TxsUpdate struct {
	config
	tx_type               *string
	created_at            *time.Time
	amount                *int64
	addamount             *int64
	reference_number      *string
	clearreference_number bool
	accounts              map[int]struct{}
	clearedAccounts       bool
	predicates            []predicate.Txs
}

// Where adds a new predicate for the builder.
func (tu *TxsUpdate) Where(ps ...predicate.Txs) *TxsUpdate {
	tu.predicates = append(tu.predicates, ps...)
	return tu
}

// SetTxType sets the tx_type field.
func (tu *TxsUpdate) SetTxType(s string) *TxsUpdate {
	tu.tx_type = &s
	return tu
}

// SetCreatedAt sets the created_at field.
func (tu *TxsUpdate) SetCreatedAt(t time.Time) *TxsUpdate {
	tu.created_at = &t
	return tu
}

// SetAmount sets the amount field.
func (tu *TxsUpdate) SetAmount(i int64) *TxsUpdate {
	tu.amount = &i
	tu.addamount = nil
	return tu
}

// AddAmount adds i to amount.
func (tu *TxsUpdate) AddAmount(i int64) *TxsUpdate {
	if tu.addamount == nil {
		tu.addamount = &i
	} else {
		*tu.addamount += i
	}
	return tu
}

// SetReferenceNumber sets the reference_number field.
func (tu *TxsUpdate) SetReferenceNumber(s string) *TxsUpdate {
	tu.reference_number = &s
	return tu
}

// SetNillableReferenceNumber sets the reference_number field if the given value is not nil.
func (tu *TxsUpdate) SetNillableReferenceNumber(s *string) *TxsUpdate {
	if s != nil {
		tu.SetReferenceNumber(*s)
	}
	return tu
}

// ClearReferenceNumber clears the value of reference_number.
func (tu *TxsUpdate) ClearReferenceNumber() *TxsUpdate {
	tu.reference_number = nil
	tu.clearreference_number = true
	return tu
}

// SetAccountsID sets the accounts edge to Account by id.
func (tu *TxsUpdate) SetAccountsID(id int) *TxsUpdate {
	if tu.accounts == nil {
		tu.accounts = make(map[int]struct{})
	}
	tu.accounts[id] = struct{}{}
	return tu
}

// SetNillableAccountsID sets the accounts edge to Account by id if the given value is not nil.
func (tu *TxsUpdate) SetNillableAccountsID(id *int) *TxsUpdate {
	if id != nil {
		tu = tu.SetAccountsID(*id)
	}
	return tu
}

// SetAccounts sets the accounts edge to Account.
func (tu *TxsUpdate) SetAccounts(a *Account) *TxsUpdate {
	return tu.SetAccountsID(a.ID)
}

// ClearAccounts clears the accounts edge to Account.
func (tu *TxsUpdate) ClearAccounts() *TxsUpdate {
	tu.clearedAccounts = true
	return tu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tu *TxsUpdate) Save(ctx context.Context) (int, error) {
	if tu.tx_type != nil {
		if err := txs.TxTypeValidator(*tu.tx_type); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"tx_type\": %v", err)
		}
	}
	if tu.reference_number != nil {
		if err := txs.ReferenceNumberValidator(*tu.reference_number); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"reference_number\": %v", err)
		}
	}
	if len(tu.accounts) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"accounts\"")
	}
	return tu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TxsUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TxsUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TxsUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TxsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   txs.Table,
			Columns: txs.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: txs.FieldID,
			},
		},
	}
	if ps := tu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := tu.tx_type; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: txs.FieldTxType,
		})
	}
	if value := tu.created_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: txs.FieldCreatedAt,
		})
	}
	if value := tu.amount; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: txs.FieldAmount,
		})
	}
	if value := tu.addamount; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: txs.FieldAmount,
		})
	}
	if value := tu.reference_number; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: txs.FieldReferenceNumber,
		})
	}
	if tu.clearreference_number {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: txs.FieldReferenceNumber,
		})
	}
	if tu.clearedAccounts {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   txs.AccountsTable,
			Columns: []string{txs.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.accounts; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   txs.AccountsTable,
			Columns: []string{txs.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TxsUpdateOne is the builder for updating a single Txs entity.
type TxsUpdateOne struct {
	config
	id                    int
	tx_type               *string
	created_at            *time.Time
	amount                *int64
	addamount             *int64
	reference_number      *string
	clearreference_number bool
	accounts              map[int]struct{}
	clearedAccounts       bool
}

// SetTxType sets the tx_type field.
func (tuo *TxsUpdateOne) SetTxType(s string) *TxsUpdateOne {
	tuo.tx_type = &s
	return tuo
}

// SetCreatedAt sets the created_at field.
func (tuo *TxsUpdateOne) SetCreatedAt(t time.Time) *TxsUpdateOne {
	tuo.created_at = &t
	return tuo
}

// SetAmount sets the amount field.
func (tuo *TxsUpdateOne) SetAmount(i int64) *TxsUpdateOne {
	tuo.amount = &i
	tuo.addamount = nil
	return tuo
}

// AddAmount adds i to amount.
func (tuo *TxsUpdateOne) AddAmount(i int64) *TxsUpdateOne {
	if tuo.addamount == nil {
		tuo.addamount = &i
	} else {
		*tuo.addamount += i
	}
	return tuo
}

// SetReferenceNumber sets the reference_number field.
func (tuo *TxsUpdateOne) SetReferenceNumber(s string) *TxsUpdateOne {
	tuo.reference_number = &s
	return tuo
}

// SetNillableReferenceNumber sets the reference_number field if the given value is not nil.
func (tuo *TxsUpdateOne) SetNillableReferenceNumber(s *string) *TxsUpdateOne {
	if s != nil {
		tuo.SetReferenceNumber(*s)
	}
	return tuo
}

// ClearReferenceNumber clears the value of reference_number.
func (tuo *TxsUpdateOne) ClearReferenceNumber() *TxsUpdateOne {
	tuo.reference_number = nil
	tuo.clearreference_number = true
	return tuo
}

// SetAccountsID sets the accounts edge to Account by id.
func (tuo *TxsUpdateOne) SetAccountsID(id int) *TxsUpdateOne {
	if tuo.accounts == nil {
		tuo.accounts = make(map[int]struct{})
	}
	tuo.accounts[id] = struct{}{}
	return tuo
}

// SetNillableAccountsID sets the accounts edge to Account by id if the given value is not nil.
func (tuo *TxsUpdateOne) SetNillableAccountsID(id *int) *TxsUpdateOne {
	if id != nil {
		tuo = tuo.SetAccountsID(*id)
	}
	return tuo
}

// SetAccounts sets the accounts edge to Account.
func (tuo *TxsUpdateOne) SetAccounts(a *Account) *TxsUpdateOne {
	return tuo.SetAccountsID(a.ID)
}

// ClearAccounts clears the accounts edge to Account.
func (tuo *TxsUpdateOne) ClearAccounts() *TxsUpdateOne {
	tuo.clearedAccounts = true
	return tuo
}

// Save executes the query and returns the updated entity.
func (tuo *TxsUpdateOne) Save(ctx context.Context) (*Txs, error) {
	if tuo.tx_type != nil {
		if err := txs.TxTypeValidator(*tuo.tx_type); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"tx_type\": %v", err)
		}
	}
	if tuo.reference_number != nil {
		if err := txs.ReferenceNumberValidator(*tuo.reference_number); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"reference_number\": %v", err)
		}
	}
	if len(tuo.accounts) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"accounts\"")
	}
	return tuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TxsUpdateOne) SaveX(ctx context.Context) *Txs {
	t, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return t
}

// Exec executes the query on the entity.
func (tuo *TxsUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TxsUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TxsUpdateOne) sqlSave(ctx context.Context) (t *Txs, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   txs.Table,
			Columns: txs.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  tuo.id,
				Type:   field.TypeInt,
				Column: txs.FieldID,
			},
		},
	}
	if value := tuo.tx_type; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: txs.FieldTxType,
		})
	}
	if value := tuo.created_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: txs.FieldCreatedAt,
		})
	}
	if value := tuo.amount; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: txs.FieldAmount,
		})
	}
	if value := tuo.addamount; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: txs.FieldAmount,
		})
	}
	if value := tuo.reference_number; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: txs.FieldReferenceNumber,
		})
	}
	if tuo.clearreference_number {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: txs.FieldReferenceNumber,
		})
	}
	if tuo.clearedAccounts {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   txs.AccountsTable,
			Columns: []string{txs.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.accounts; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   txs.AccountsTable,
			Columns: []string{txs.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	t = &Txs{config: tuo.config}
	_spec.Assign = t.assignValues
	_spec.ScanValues = t.scanValues()
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return t, nil
}
